# -*- coding: utf-8 -*-

"""
/***************************************************************************
 QGISConnectorSnowflake
                                 A QGIS plugin
 This plugin imports Snowflake spatial data as layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-07
        copyright            : (C) 2024 by Snowflake
        email                : erick.cuberojimenez@snowflake.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Snowflake"
__date__ = "2024-08-07"
__copyright__ = "(C) 2024 by Snowflake"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

import os
import sys
import inspect

from qgis.core import (
    QgsProcessingAlgorithm,
    QgsApplication,
    QgsProviderRegistry,
    QgsProviderMetadata,
)

from .providers.sf_vector_data_provider_test import SFVectorDataProviderTest

from .providers.sf_vector_data_provider import SFVectorDataProvider

from .providers.sf_data_item_provider import SFDataItemProvider

from .providers.sf_source_select_provider import SFSourceSelectProvider
from .qgis_connector_snowflake_provider import QGISConnectorSnowflakeProvider
from .resources import *
from qgis.gui import QgsGui

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)


class QGISConnectorSnowflakePlugin(object):
    def __init__(self):
        self.provider = None

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = QGISConnectorSnowflakeProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)
        self.tm = QgsApplication.taskManager()
        sf_source_select_provider = SFSourceSelectProvider("mssp")
        QgsGui.sourceSelectProviderRegistry().addProvider(sf_source_select_provider)

        sf_data_item_provider = SFDataItemProvider("dipk", "Snowflake")
        QgsApplication.dataItemProviderRegistry().addProvider(sf_data_item_provider)

        def createSFVectorDataProvider(
            uri: str, options, flags
        ) -> SFVectorDataProviderTest:
            # return SFVectorDataProvider(uri)
            return SFVectorDataProviderTest(uri)

        provider_metadata = QgsProviderMetadata(
            key="SFVectorDataProvider",
            description="Snowflake Vector Data Provider",
            library_or_create_func=createSFVectorDataProvider,
        )
        QgsProviderRegistry.instance().registerProvider(provider_metadata)

    def initGui(self):
        self.initProcessing()

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)

        my_provider_list = QgsGui.sourceSelectProviderRegistry().providersByKey("mssp")
        if len(my_provider_list) > 0:
            QgsGui.sourceSelectProviderRegistry().removeProvider(my_provider_list[0])
        providers_list = QgsApplication.dataItemProviderRegistry().providers()
        found_provider = None
        for prov in providers_list:
            try:
                if isinstance(prov, SFDataItemProvider):
                    found_provider = prov
                    break
            except Exception as _:
                pass
        if found_provider is not None:
            QgsApplication.dataItemProviderRegistry().removeProvider(found_provider)
